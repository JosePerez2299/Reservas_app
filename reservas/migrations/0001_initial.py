# Generated by Django 5.2 on 2025-05-15 15:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ubicacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Ubicaciones',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('piso', models.PositiveSmallIntegerField(blank=True, help_text='Piso en el que puede moderar o reservar', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(40)])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('ubicacion', models.ForeignKey(help_text='La sede/edificio al que pertenece el usuario', null=True, on_delete=django.db.models.deletion.SET_NULL, to='reservas.ubicacion')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Espacio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True)),
                ('piso', models.PositiveSmallIntegerField(help_text='Piso en que se encuentra el espacio', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(40)])),
                ('capacidad', models.PositiveIntegerField(help_text='Capacidad máxima (≤ 1000)', validators=[django.core.validators.MaxValueValidator(1000)])),
                ('tipo', models.CharField(choices=[('salon', 'Salón'), ('laboratorio', 'Laboratorio'), ('auditorio', 'Auditorio')], max_length=20)),
                ('disponible', models.BooleanField(default=True)),
                ('ubicacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservas.ubicacion')),
            ],
            options={
                'verbose_name': 'Espacio',
                'verbose_name_plural': 'Espacios',
                'ordering': ['ubicacion', 'piso', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_uso', models.DateField()),
                ('hora_inicio', models.TimeField()),
                ('hora_fin', models.TimeField()),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('aprobada', 'Aprobada'), ('rechazada', 'Rechazada')], default='pendiente', max_length=10)),
                ('motivo', models.TextField()),
                ('aprobado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservas_aprobadas', to=settings.AUTH_USER_MODEL)),
                ('espacio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to='reservas.espacio')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reserva',
                'verbose_name_plural': 'Reservas',
                'ordering': ['fecha_uso', 'hora_inicio'],
                'indexes': [models.Index(fields=['espacio', 'fecha_uso'], name='reservas_re_espacio_552dbd_idx')],
                'constraints': [models.UniqueConstraint(fields=('usuario', 'espacio', 'fecha_uso'), name='uniq_usuario_espacio_fecha'), models.CheckConstraint(condition=models.Q(('hora_inicio__lt', models.F('hora_fin'))), name='check_hora_inicio_menor_fin')],
            },
        ),
        migrations.AddIndex(
            model_name='espacio',
            index=models.Index(fields=['ubicacion', 'piso'], name='reservas_es_ubicaci_793063_idx'),
        ),
        migrations.AddConstraint(
            model_name='espacio',
            constraint=models.CheckConstraint(condition=models.Q(('capacidad__lte', 1000)), name='check_capacidad_max_1000'),
        ),
    ]
